name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build each Dockerfile
        run: |
          for dockerfile in $(ls dockerfiles/); do
            image_name=$(basename $dockerfile | tr '[:upper:]' '[:lower:]')
            docker build -f dockerfiles/$dockerfile -t $image_name .
          done

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up environment variables
        run: |
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> $GITHUB_ENV
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV

      - name: Run test suite
        env:
          PYTHONPATH: ${{ github.workspace }}/app:${{ github.workspace }}/tests
        run: PYTHONPATH=tests python -m unittest tests.test_suite

  deploy:
    runs-on: ubuntu-latest
    needs: test # Test must pass.
    if: github.event_name == 'push' # Only deploy on push to main

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Server setup lines
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_HOST }} << 'EOF'
            if [ ! -d "IDE-autograder" ]; then
                git clone git@github.com:Classla/IDE-autograder.git
            else
                echo "IDE-autograder repository already exists, skipping clone."
            fi

            sudo apt-get update -y
            sudo apt-get upgrade -y
            sudo apt-get install python3 python3-pip -y
            sudo apt-get install git -y

            pip install virtualenv
            virtualenv autograder_env
            source autograder_env/bin/activate
            pip install -r requirements.txt

            if ! command -v docker &> /dev/null
            then
                echo "Docker not found, installing Docker..."

                sudo apt-get install -y \
                apt-transport-https \
                ca-certificates \
                curl \
                software-properties-common
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                sudo usermod -aG docker $USER
                newgrp docker
                echo "Docker installation complete."
            else
                echo "Docker is already installed, skipping installation."
            fi

            # Check if Nginx is already installed
            if ! command -v nginx &> /dev/null
            then
                echo "Nginx not found, installing Nginx..."
                sudo apt-get install nginx -y
                echo "Nginx installation complete."
            else
                echo "Nginx is already installed, skipping installation."
            fi

            sudo cp ./autograder.classla.org/nginx.conf /etc/nginx/sites-available/fastapi

            sudo ln -s /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
            sudo nginx -t
            sudo systemctl restart nginx
            echo "Nginx configuration for FastAPI is complete."

            sudo cp ./autograder.classla.org/fastapi.service /etc/systemd/system/fastapi.service

          sudo systemctl reload nginx
          sudo systemctl start fastapi
          sudo systemctl enable fastapi


          EOF

      - name: Pull latest changes and install requirements on server
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_HOST }} << 'EOF'
            #  Pull repository changes
            cd IDE-autograder
            git pull origin main

            # Set up the virtual environment and install requirements
            source autograder_env/bin/activate
            pip install -r requirements.txt
          EOF

      - name: Rebuilding docker images
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_HOST }} << 'EOF'
            cd IDE-autograder
            bash ./autograder.classla.org/build_docker_images.sh
          EOF

      - name: Restart FastAPI application
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_HOST }} << 'EOF'
            sudo systemctl restart fastapi
            sudo systemctl reload nginx
          EOF
